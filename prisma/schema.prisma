// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  superAdmin
  admin
}

enum UserAccountStatus {
  active
  deleted
  banned
}

model User {
  id                  String            @id @default(cuid())
  userId              String            @unique
  fullName            String
  email               String            @unique
  password            String
  needsPasswordChange Boolean           @default(false)
  role                Role              @default(admin)
  status              UserAccountStatus @default(active)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  sessionTokenId      String?

  photoGalleries          PhotoGallery[]
  videoGalleries          VideoGallery[]
  mediaPublishedNews      MediaPublishedNews[]
  scholarshipApplications ScholarshipApplication[]

  @@index([email, userId])
  @@map("users")
}

model BlogCategory {
  id    String  @id @default(cuid())
  name  String  @unique
  thumb String?

  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  blogCategoryRelation BlogCategoryRelation[]

  @@index([name])
  @@map("blog_categories")
}

model Blog {
  id    String @id @default(cuid())
  title String
  slug  String @unique
  body  String @db.LongText
  thumb String

  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  blogCategoryRelation BlogCategoryRelation[]

  @@index([slug])
  @@map("blogs")
}

model BlogCategoryRelation {
  blogId     String
  categoryId String
  assignedAt DateTime @default(now())

  blog     Blog         @relation(fields: [blogId], references: [id], onDelete: Cascade)
  category BlogCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([blogId, categoryId])
  @@map("blog_category_relations")
}

model PhotoGallery {
  id              String @id @default(cuid())
  title           String
  image           String
  createdByUserId String

  createdBy User     @relation(fields: [createdByUserId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([createdByUserId])
  @@map("photo_galleries")
}

model VideoGallery {
  id              String @id @default(cuid())
  title           String
  ytVideoLink     String @db.LongText
  ytVideoId       String // Id from youtube to get the thumbnail 
  createdByUserId String

  createdBy User     @relation(fields: [createdByUserId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([createdByUserId])
  @@map("video_galleries")
}

model MediaPublishedNews {
  id              String @id @default(cuid())
  title           String
  thumb           String
  url             String @db.LongText
  origin          String
  createdByUserId String

  createdBy User     @relation(fields: [createdByUserId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([createdByUserId])
  @@map("media_published_newses")
}

// Scholarship application schemas

model ScholarshipApplicationDepartment {
  id                      Int                      @id @default(autoincrement())
  name                    String                   @unique
  scholarshipApplications ScholarshipApplication[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("scholarship_application_departments")
}

model ScholarshipApplicationHall {
  id                      Int                      @id @default(autoincrement())
  name                    String                   @unique
  scholarshipApplications ScholarshipApplication[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("scholarship_application_halls")
}

enum ScholarshipApplicationStatus {
  pending
  approved
}

model ScholarshipApplication {
  id                 String                       @id @default(cuid())
  requestId          String                       @unique
  name               String
  applicationSubject String
  session            String
  registrationNumber String
  mobileNumber       String
  reference1         String?
  reference2         String?
  problemDetails     String                       @db.LongText
  approvedByUserId   String?
  status             ScholarshipApplicationStatus @default(pending)

  departmentId Int
  department   ScholarshipApplicationDepartment @relation(fields: [departmentId], references: [id])

  hallId Int
  hall   ScholarshipApplicationHall @relation(fields: [hallId], references: [id])

  approvedByUser User?    @relation(fields: [approvedByUserId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([requestId])
  @@map("scholarship_applications")
}
